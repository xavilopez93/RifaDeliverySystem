@model RifaDeliverySystem.Web.Models.Rendition
@using Microsoft.AspNetCore.Mvc.Rendering
@using RifaDeliverySystem.Web.Extensions;
@{
    ViewData["Title"] = "Edit Rendition";
}
@using System.Globalization
@using RifaDeliverySystem.Web.Models
@{
    CultureInfo.CurrentCulture = new CultureInfo("es-PY");
    CultureInfo.CurrentUICulture = new CultureInfo("es-PY");
}

<h1>Editar Rendicion</h1>
<form asp-action="Edit" method="post">
    <input type="hidden" asp-for="Id" />
    <input type="hidden" asp-for="VendorId" />
     <div class="mb-3">
        <label asp-for="Vendor.Name" class="form-label">Vendedor</label>
     
        <input asp-for="Vendor.Name" class="form-control" disabled />
      
        <span asp-validation-for="Vendor.Name" class="text-danger"></span>
    </div>

    <h5>Rangos asignados</h5>
    <div class="mb-3">
        <div class="row">
            @if (ViewData["CouponRanges"] != null)
            {
            
                @await Html.PartialAsync("_CouponRangeCheckbox", ViewData["CouponRanges"])
            }
            else
            {
                <div class="alert alert-warning">No se encontraron rangos de cupones.</div>
            }

            
        </div>
    
    </div>

    <p>Total de cupones seleccionados: <strong id="totalCoupons">0</strong></p>


 
    <div class="mb-3">
        <label asp-for="Date">Fecha</label>
        <input asp-for="Date" type="date" class="form-control" />
    </div>
    <div class="mb-3">
        <label asp-for="CouponsSold">Cupones Vendidos</label>
        <input asp-for="CouponsSold" class="form-control money-input" />
    </div>
    <div class="mb-3">
        <label asp-for="CouponsReturned">Cupones Devueltos</label>
        <input asp-for="CouponsReturned" class="form-control money-input" />
    </div>
    <div class="mb-3">
        <label asp-for="Extravio" class="form-label">Cupones Extraviados</label>
        <input asp-for="Extravio" class="form-control money-input" />
        <span asp-validation-for="Extravio" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <label asp-for="Robo" class="form-label">Cupones Robados</label>
        <input asp-for="Robo" class="form-control money-input" />
        <span asp-validation-for="Robo" class="text-danger"></span>
    </div>
 

    <div class="mb-3">
        <table class="table" id="paymentsTable">
            <thead>
                <tr><th>Forma</th><th>Monto</th><th>Referencia</th><th></th></tr>
            </thead>
            <tbody id="paymentContainer">
                @for (int i = 0; i < Model.Payments.Count; i++)
                {
                    var paymentViewData = new ViewDataDictionary(ViewData)
                                {
                                { "HtmlFieldPrefix", $"Payments[{i}]" }
                                };

                    <partial name="_PaymentRow" model="Model.Payments[i]" view-data="paymentViewData" />
                }
            </tbody>

        </table>

        <div class="mt-2">
            <strong>Total Pagado: </strong><span id="totalAmountDisplay">0</span> Gs.
        </div>

        <div id="balanceWarning" class="text-danger mt-1" style="display: none;">
             El total de pagos supera el saldo a rendir.
        </div>

        <button type="button" id="addRow" class="btn btn-secondary">Agregar forma de cobro</button>

  
    </div>

    <button type="submit" class="btn btn-primary" id="submitBtn">Guardar</button>

    <a asp-action="Index" class="btn btn-secondary">Cancelar</a>
</form>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.getElementById('addRow').addEventListener('click', () => {
                  let currentIndex = document.querySelectorAll('.payment-row').length;

        fetch('/Renditions/EmptyPaymentRow')
            .then(res => res.text())
            .then(html => {
                const prefixed = html.replaceAll('name="Amount"', `name="Payments[${currentIndex}].Amount"`)
                                     .replaceAll('name="Type"', `name="Payments[${currentIndex}].Type"`)
                                     .replaceAll('name="ReceiptNumber"', `name="Payments[${currentIndex}].ReceiptNumber"`)
                                     .replaceAll('id="Amount"', `id="Payments_${currentIndex}__Amount"`); // para evitar duplicados

                document.getElementById('paymentContainer').insertAdjacentHTML('beforeend', prefixed);
                afterNewPaymentRowAdded(); // reaplica eventos y validación
            });

        });

        document.addEventListener('click', e => {
            if (e.target.closest('.remove-row')) {
                e.target.closest('tr').remove();
                renumerateIndexes();
            }
        });

        function renumerateIndexes() {
            document.querySelectorAll('.payment-row').forEach((row, idx) => {
                row.querySelectorAll('input, select').forEach(el => {
                    const nameAttr = el.name;
                    if (nameAttr) {
                        el.name = nameAttr.replace(/Payments\[\d+\]/, `Payments[${idx}]`);
                        el.id = el.id.replace(/Payments_\d+__/, `Payments_${idx}__`);
                    }
                });
            });
        }
                 function normalizeToDecimal(str) {
            return str.replace(/\./g, '').replace(',', '.');
        }

        function updateTotalAmount() {
            let total = 0;
            let hasValid = false;

            document.querySelectorAll('.payment-amount').forEach(function (input) {
                const raw = normalizeToDecimal(input.value);
                const val = parseFloat(raw);
                if (!isNaN(val) && val > 0) {
                    total += val;
                    hasValid = true;
                }
            });

            const totalDisplay = document.getElementById('totalAmountDisplay');
            if (totalDisplay)
                totalDisplay.innerText = total.toLocaleString('es-PY', { maximumFractionDigits: 0 });

            const balanceField = document.getElementById('balanceField');
            const warning = document.getElementById('balanceWarning');
            const submitBtn = document.getElementById('submitBtn');

            if (balanceField && warning && submitBtn) {
                const balanceValue = parseFloat(normalizeToDecimal(balanceField.value)) || 0;

                if (!hasValid || total > balanceValue) {
                    warning.style.display = total > balanceValue ? 'block' : 'none';
                    submitBtn.disabled = true;
                } else {
                    warning.style.display = 'none';
                    submitBtn.disabled = false;
                }
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.money-input').forEach(function (input) {
                input.addEventListener('input', function () {
                    const raw = input.value.replace(/\D/g, '');
                    if (raw)
                        input.value = Number(raw).toLocaleString('es-PY');

                    updateTotalAmount();
                });

                const form = input.closest('form');
                if (form) {
                    form.addEventListener('submit', function () {
                        input.value = normalizeToDecimal(input.value);
                    });
                }

                if (input.value)
                    input.value = Number(normalizeToDecimal(input.value)).toLocaleString('es-PY');
            });

            document.body.addEventListener('input', function (e) {
                if (e.target.classList.contains('payment-amount') || e.target.classList.contains('money-input')) {
                    updateTotalAmount();
                }
            });

            updateTotalAmount();
        });
    </script>
}
