@model RifaDeliverySystem.Web.Models.Rendition
@using Microsoft.AspNetCore.Mvc.Rendering
@using RifaDeliverySystem.Web.Extensions;

@{
    ViewData["Title"] = "Crear RendiciÃ³n";
    // ViewBag.Vendors  = SelectList of vendor.Id / vendor.Name
    // ViewBag.Ranges   = SelectList of range.Id / $"{range.Vendor.Name}: {range.StartNumber}-{range.EndNumber}"
}
@using System.Globalization
@using System.Text.RegularExpressions
@{
    CultureInfo.CurrentCulture = new CultureInfo("es-PY");
    CultureInfo.CurrentUICulture = new CultureInfo("es-PY");
}

<h1>@ViewData["Title"]</h1>

<form asp-action="Create" method="post">
    <div asp-validation-summary="All" class="text-danger"></div>

    <div class="mb-3">
        <label asp-for="VendorId" class="form-label">Vendedor</label>
        <select asp-for="VendorId" id="VendorId" asp-items="ViewBag.Vendors" class="form-select">
            <option value="">-- Seleccione --</option>
        </select>
        <span asp-validation-for="VendorId" class="text-danger"></span>
    </div>

    <!-- â¼ Rangos disponibles (multi-select) -->
    <div class="mb-3">
      <select asp-for="RangeIds"
        asp-items="Model.AvailableRanges" id="RangeIds"
        multiple class="form-select select2">
</select>
<span asp-validation-for="RangeIds" class="text-danger"></span>
    </div>

    <p>Total de cupones seleccionados: <strong id="totalCoupons">0</strong></p>
    <input asp-for="Balance" class="form-control money-input" id="balanceField" />

    <div class="row">
        <div class="col">
            <label asp-for="CouponsSold" class="form-label">Cupones Vendidos</label>
            <input asp-for="CouponsSold" class="form-control money-input" />
            <span asp-validation-for="CouponsSold" class="text-danger"></span>
        </div>
        <div class="col">
            <label asp-for="CouponsReturned" class="form-label">Cupones Devueltos</label>
            <input asp-for="CouponsReturned" class="form-control money-input" />
            <span asp-validation-for="CouponsReturned" class="text-danger"></span>
        </div>
        <div class="col">
            <label asp-for="Extravio" class="form-label">Cupones Extraviados</label>
            <input asp-for="Extravio" class="form-control money-input" />
            <span asp-validation-for="Extravio" class="text-danger"></span>
        </div>
        <div class="col">
            <label asp-for="Robo" class="form-label">Cupones Robados</label>
            <input asp-for="Robo" class="form-control money-input" />
            <span asp-validation-for="Robo" class="text-danger"></span>
        </div>
    </div>

    <table class="table" id="paymentsTable">
        <thead>
            <tr><th>Forma</th><th>Monto</th><th>Referencia</th><th></th></tr>
        </thead>
        <tbody id="paymentContainer">
    @* Enumerate through existing payments and include a hidden index for each one. Without this
       `Payments.Index` field ASP.NET Core's model binder will not bind collection items properly. *@
   
</tbody>

    </table>
    <div class="mt-2">
        <strong>Total Pagado: </strong><span id="totalAmountDisplay">0</span> Gs.
    </div>
    <div id="balanceWarning" class="text-danger mt-1" style="display: none;">
     El total de pagos supera el saldo a rendir.
</div>

    <button type="button" id="addRow" class="btn btn-secondary">Agregar forma de cobro</button>
    
    <button type="submit" class="btn btn-primary" id="submitBtn">Guardar</button>

    <a asp-action="Index" class="btn btn-secondary">Cancelar</a>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
     <script src="~/lib/select2/js/select2.min.js"></script>
    <link  href="~/lib/select2/css/select2.min.css" rel="stylesheet" />
    <script>
        document.getElementById('addRow').addEventListener('click', () => {
let currentIndex = document.querySelectorAll('.payment-row').length;

fetch(window.location.origin + '/Renditions/EmptyPaymentRow')

    .then(res => res.text())
    .then(html => {
        const prefixed = html.replaceAll('name="Amount"', `name="Payments[${currentIndex}].Amount"`)
                             .replaceAll('name="Type"', `name="Payments[${currentIndex}].Type"`)
                             .replaceAll('name="ReceiptNumber"', `name="Payments[${currentIndex}].ReceiptNumber"`)
                             .replaceAll('id="Amount"', `id="Payments_${currentIndex}__Amount"`); // para evitar duplicados
        // Insert a hidden index before the row so the model binder can reconstruct the collection
        const hiddenIndex = `<input type="hidden" name="Payments.Index" value="${currentIndex}" />`;
        document.getElementById('paymentContainer').insertAdjacentHTML('beforeend', hiddenIndex + prefixed);
        afterNewPaymentRowAdded(); // reaplica eventos y validaciÃ³n
    });

        });
        document.addEventListener('click', e => {
            if (e.target.closest('.remove-row')) {
                e.target.closest('tr').remove();
                renumerateIndexes();
            }
        });
        function renumerateIndexes() {
                document.querySelectorAll('.payment-row').forEach((row, idx) => {
                // Also update the hidden Payments.Index field preceding each row
                const hidden = row.previousElementSibling;
                if (hidden && hidden.name === 'Payments.Index') {
                    hidden.value = idx;
                }
                row.querySelectorAll('input,select').forEach(el => {
                    el.name = el.name.replace(/Payments\[\d+\]/, `Payments[${idx}]`);
                    el.id   = el.id.replace(/_Payments_\d+__/, `_Payments_${idx}__`);
                });
            });
        }
        // ===== Select2 =====
        $('.select2').select2({
            placeholder: 'Seleccione uno o varios rangos',
            width: '100%',
            dropdownParent: $('form')
        });

        // ===== Conteo dinÃ¡mico =====
     const rangeMap = @Html.Raw(
            System.Text.Json.JsonSerializer.Serialize(
                Model.AvailableRanges.ToDictionary(
                    r => int.Parse(r.Value),
                    r => {
                        try
                    {
                        var regex = new Regex(@"\(?\s*(\d+)\s*-\s*(\d+)\s*\)?");
        var match = regex.Match(r.Text);
        int result = 0;
        if (match.Success)
        {
            // Grupo 1 = primer nÃºmero, Grupo 2 = segundo nÃºmero
            int a = int.Parse(match.Groups[1].Value);
            int b = int.Parse(match.Groups[2].Value);
             result = b - a + 1;
        }
        else
        {
        }
                       
                        return result;
                    }
                    catch (Exception ex)
                    {
                        
                        throw;
                    }
                      
                    })
            )
        );

        function updateTotal() {
            let total = 0;
            $('#RangeIds option:selected').each(function () {
                total += rangeMap[parseInt(this.value)];
            });
            $('#totalCoupons').text(total);
        }
        updateTotal();
        $('.select2').on('change', updateTotal);


        $('#VendorId').on('change', function () {
            const vid = $(this).val();
            // recarga la misma vista con el vendorId como querystring
            window.location = '@Url.Action("Create","Renditions")' + '?vendorId=' + vid;
        });


      function normalizeToDecimal(str) {
        return str.replace(/\./g, '').replace(',', '.');
    }

    function updateTotalAmount() {
        let total = 0;
        let hasValid = false;

        document.querySelectorAll('.payment-amount').forEach(function (input) {
            const raw = normalizeToDecimal(input.value);
            const val = parseFloat(raw);
            if (!isNaN(val) && val > 0) {
                total += val;
                hasValid = true;
            }
        });

        const totalDisplay = document.getElementById('totalAmountDisplay');
        if (totalDisplay)
            totalDisplay.innerText = total.toLocaleString('es-PY', { maximumFractionDigits: 0 });

        const balanceField = document.getElementById('balanceField');
        const warning = document.getElementById('balanceWarning');
        const submitBtn = document.getElementById('submitBtn');

        if (balanceField && warning && submitBtn) {
            const balanceValue = parseFloat(normalizeToDecimal(balanceField.value)) || 0;

            if (!hasValid || total > balanceValue) {
                warning.style.display = total > balanceValue ? 'block' : 'none';
                submitBtn.disabled = true;
            } else {
                warning.style.display = 'none';
                submitBtn.disabled = false;
            }
        }
    }

    function attachMoneyBehavior(input) {
        input.addEventListener('input', function () {
            const raw = input.value.replace(/\D/g, '');
            if (raw)
                input.value = Number(raw).toLocaleString('es-PY');

            updateTotalAmount();
        });

        const form = input.closest('form');
        if (form) {
            form.addEventListener('submit', function () {
                input.value = normalizeToDecimal(input.value);
            });
        }

        if (input.value)
            input.value = Number(normalizeToDecimal(input.value)).toLocaleString('es-PY');
    }

    function rebindMoneyInputs() {
        document.querySelectorAll('.money-input').forEach(function (input) {
            // Previene duplicar listeners si ya fue inicializado
            if (!input.dataset.bound) {
                attachMoneyBehavior(input);
                input.dataset.bound = "true";
            }
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        rebindMoneyInputs();
        updateTotalAmount();
    });


    function afterNewPaymentRowAdded() {
        rebindMoneyInputs();
        updateTotalAmount();
    }

    function normalizeToDecimalForPost(v) {
    if (!v) return "";
    // Quita separadores de miles y cambia coma por punto
    return v.replace(/\./g, '').replace(',', '.');
  }

  document.querySelector('form').addEventListener('submit', function () {
    document.querySelectorAll('.payment-amount').forEach(function (inp) {
      inp.value = normalizeToDecimalForPost(inp.value);
    });
  });
    </script>
}
